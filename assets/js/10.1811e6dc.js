(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{366:function(t,s,a){t.exports=a.p+"assets/img/01-console.338937b0.png"},400:function(t,s,a){"use strict";a.r(s);var n=a(44),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_3강-기본-입출력-함수"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3강-기본-입출력-함수"}},[t._v("#")]),t._v(" 3강 기본 입출력 함수")]),t._v(" "),n("p",[t._v("이번 강의에서는 파이썬의 기본 입출력 함수에 대해 이야기해보려고 합니다.")]),t._v(" "),n("h2",{attrs:{id:"입출력이란-무엇인가"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#입출력이란-무엇인가"}},[t._v("#")]),t._v(" 입출력이란 무엇인가?")]),t._v(" "),n("p",[t._v("입출력이란, 말 그대로 입력과 출력이에요. 프로그래밍을 하면서, 만들어낸 프로그램이 외부로부터 데이터를 "),n("strong",[t._v("입력")]),t._v(" 받고, 프로그램이 외부에 데이터를 "),n("strong",[t._v("출력")]),t._v(" 하게 될거에요.\n이 입력과 출력은 프로그램이 실행중인 콘솔에서 이루어질 수도 있고, 프로그램과 통신하는 외부 서버 사이에서 이루어질 수도 있습니다.")]),t._v(" "),n("p",[t._v("오늘은, 가장 기본적인 콘솔과의 입출력에 대해 배워보려고 해요.")]),t._v(" "),n("h2",{attrs:{id:"콘솔이란-무엇인가"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#콘솔이란-무엇인가"}},[t._v("#")]),t._v(" 콘솔이란 무엇인가?")]),t._v(" "),n("p",[n("img",{attrs:{src:a(366),alt:"imaage01"}}),t._v("\n프로그램을 실행할 때, 검정색 배경에 흰색으로 글씨가 적혀있는 창이 나타날거에요. 이 창을 "),n("strong",[t._v("콘솔(console)")]),t._v(" 이라고 불러요.\n우리는 이 창에 데이터를 출력할 수도 있고, 반대로 이 창에서 프로그램으로 데이터를 입력할 수도 있어요.")]),t._v(" "),n("p",[t._v("우선, 이 창에 데이터를 입력하는 과정부터 진행해볼게요.\n파이썬에서는 콘솔에 데이터를 출력하는 가장 기본적인 함수로 "),n("strong",[t._v("print")]),t._v(" 를 제공해요.\n이 print 함수의 괄호 안에 출력하고자 하는 데이터를 전달해, 콘솔에 데이터를 출력할 수 있어요.\n[ code ]")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("[ result ]")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("100\nTrue\nHello World!\n3.14\n")])])]),n("p",[t._v("print 함수에 여러개의 데이터를 쉼표(,) 로 구분해서 입력해주면, 입력한 데이터들을 공백 한 칸(띄어쓰기)으로 구분해서 출력해줘요.\n[ code ]")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("[ result ]")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("100 True Hello! 3.14\n")])])]),n("p",[t._v("앞서 2강에서 여러가지 자료형의 데이터들을 변수에 저장했었죠? 파이썬에서는 변수가 담고있는 데이터의 자료형을 반환하는 "),n("strong",[t._v("type")]),t._v(" 이라는 함수가 있어요.\n[ code ]")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("[ result ]")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<class 'int'>\n<class 'bool'>\n<class 'str'>\n<class 'float'>\n")])])]),n("p",[t._v('위에서 살펴 보았듯 print에 print("Hello world!")와 같은 단순한 문장이 아니라 변수 여러개, 혹은 변수와 문자열이 혼합되어 있는 상태로 출력할 수도 있어요.\n이럴때 데이터들 간 공백을 집어 넣어서 출력하고 싶기도 하겠지만 특정한 문자나 혹은 다 붙여서 출력하고 싶을 경우가 있을거에요.\n파이썬은 '),n("strong",[t._v("end")]),t._v("와 "),n("strong",[t._v("sep")]),t._v("이라는 인자를 통해서 이를 조절할 수 있는 방법을 제공해요.")]),t._v(" "),n("p",[t._v("end는 print문 안에 있는 데이터들을 모두 출력 한 후 마지막에 어떤 문자를 출력할 지 결정하고,\nsep은 print문 안에 있는 데이터 사이 사이에 어떤 문자를 넣을지 결정하는 인자에요.")]),t._v(" "),n("p",[t._v('end의 기본값은 "\\n"(얘는 엔터와 같다고 생각하면 돼요),\nsep의 기본값은 " "(한 칸 띄어쓰는 거에요)입니다.')]),t._v(" "),n("p",[t._v("따라서 우리가 아래의 코드를 실행시키면 자동적으로 print 함수 1개를 실행시킬 때마다 엔터가 삽입되고, 데이터 사이 사이에 띄어쓰기가 자동적으로 적용되는거에요.")]),t._v(" "),n("p",[t._v("end와 sep 설정을 변경하기 위해서는 아래와 같이 하면 돼요.")]),t._v(" "),n("p",[t._v('print([데이터], end="", sep="")')]),t._v(" "),n("p",[t._v("여담으로, end와 sep의 순서는 관계 없어요. 그러면 코드를 통해서 어떻게 실행되는지 알아보도록 할게요.")]),t._v(" "),n("p",[t._v("[ code ]")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"H"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"e"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"l"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"l"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"o"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sep"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Python!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("[ result ]")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Hello Python\n")])])]),n("p",[t._v("위에서 보았던 것과는 대조적이죠? 첫 번째 print 함수에서는 각 데이터들 간에 띄어쓰기가 적용되지 않았고 마지막에 한 줄 내려가는 대신 띄어쓰기 한 칸이 적용되었어요.\n그리고 두 번째 print 함수의 데이터가 이어져서 출력되었고요.")]),t._v(" "),n("p",[t._v("콘솔에 데이터를 출력했다면, 이제는 콘솔에서 데이터를 입력할 차례겠죠.\n파이썬은 콘솔에서 데이터를 입력받는 가장 기본적인 함수로 "),n("strong",[t._v("input")]),t._v("을 제공해요.\n이 input 함수의 괄호 안에는 데이터 입력을 받기 전에 출력할 문자열을 전달하고, input 함수는 입력받은 데이터를 문자열로 반환해요.\n[ code ]")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("answer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"정답을 입력해주세요! : "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"입력하신 정답은"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" answer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"입니다."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("[ resuit]")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("정답을 입력해주세요! : 안녕\n입력하신 정답은 안녕 입니다.\n")])])]),n("hr"),t._v(" "),n("p",[n("a",{attrs:{href:"./builtin_IOs.py"}},[t._v("예제 코드 보기")])]),t._v(" "),n("p",[n("RouterLink",{attrs:{to:"/Basics/02-변수와 타입/"}},[t._v("<- 이전 강좌")]),t._v(" /\n"),n("RouterLink",{attrs:{to:"/Basics/04-연산자/"}},[t._v("다음 강좌 ->")])],1)])}),[],!1,null,null,null);s.default=e.exports}}]);