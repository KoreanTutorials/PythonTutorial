(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{386:function(t,s,a){"use strict";a.r(s);var n=a(44),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"문자열의-편리한-기능들"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#문자열의-편리한-기능들"}},[t._v("#")]),t._v(" 문자열의 편리한 기능들")]),t._v(" "),a("p",[t._v("파이썬의 문자열은 더 편리하게 다루기 위한 여러 기능들을 알아봅시다.")]),t._v(" "),a("h2",{attrs:{id:"_1-따옴표-이스케이프-문자"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-따옴표-이스케이프-문자"}},[t._v("#")]),t._v(" 1. 따옴표 이스케이프 문자")]),t._v(" "),a("p",[t._v("문자열을 사용할 때, 문자열 기호 (작은따옴표"),a("code",[t._v("'")]),t._v(" 또는 큰따옴표"),a("code",[t._v('"')]),t._v(")를 문자열 내부에서 사용해야 할 때가 있습니다. 하지만, 그냥 문자열 기호를 사용하게 되면 문자열이 끝난걸로 인식되어 오류가 발생하게 됩니다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"그는 "')]),t._v("안녕하세요"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" 라고 말했다."')]),t._v("\n")])])]),a("p",[t._v("그렇다면, 문자열 내부에서 따옴표는 어떻게 써야 할까요?\n"),a("strong",[a("code",[t._v("이스케이프 문자")])]),t._v(" 를 사용해 이 문제를 해결할 수 있습니다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"그는 \\"안녕하세요\\" 라고 말했다."')]),t._v("\n")])])]),a("p",[t._v("이스케이핑 문자는 "),a("strong",[a("code",[t._v("\\")])]),t._v(" 문자를 사용합니다. 한글 키보드로는 "),a("code",[t._v("￦")]),t._v(" 키를 눌러 사용할 수 있습니다.\n이스케이핑 문자는 따옴표 표현 이외에도 여러가지가 있습니다. 자세한 내용은 "),a("a",{attrs:{href:"https://zetawiki.com/wiki/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84_%EB%AC%B8%EC%9E%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("이스케이프 문자 알아보기"),a("OutboundLink")],1),t._v(" 를 참고해 주세요.")]),t._v(" "),a("h2",{attrs:{id:"_2-문자열-자르기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-문자열-자르기"}},[t._v("#")]),t._v(" 2. 문자열 자르기")]),t._v(" "),a("p",[t._v("문자열 타입인 **"),a("code",[t._v("str")]),t._v("**은 문자열을 분할하기 위한 메소드인 split을 제공합니다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello This Is Python!'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("['Hello', 'This', 'Is', 'Python!]")])]),t._v(" "),a("p",[t._v("split() 메소드는 자르기 위한 기준이 되는 문자열을 인자로 받습니다. 위 예제에서는, 띄어쓰기 ("),a("code"),t._v(") 를 기준으로 자르기 위해\n"),a("code",[t._v("text.split(' ')")]),t._v(" 처럼 사용했습니다.")]),t._v(" "),a("h2",{attrs:{id:"_3-문자열의-시작-끝-검사하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-문자열의-시작-끝-검사하기"}},[t._v("#")]),t._v(" 3. 문자열의 시작, 끝 검사하기")]),t._v(" "),a("p",[t._v("문자열 타입인 **"),a("code",[t._v("str")]),t._v("**은 문자열의 앞, 뒤에 특정 문자열이 위치하는지 검사하는 메소드를 제공합니다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello Python!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startswith"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("endswith"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!!!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[a("code",[t._v("startswith()")])]),t._v(" 메소드는 이 문자열이 인자로 전달받은 문자열로 시작하는지 확인해, True 또는 False를 반환합니다.\n위 코드에서는 text 변수에 저장된 문자열이 "),a("code",[t._v('"Hello"')]),t._v(" 라는 문자열로 시작되는지 확인하기 위해, "),a("code",[t._v('text.startswith("Hello")')]),t._v(" 를 사용했습니다.")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("endswith()")])]),t._v(" 메소드는 이 문자열이 인자로 전달받은 문자열로 끝나는지 확인해, True 또는 False를 반환합니다.\n위 코드에서는 text 변수에 저장된 문자열이 "),a("code",[t._v('"!"')]),t._v(" 라는 문자열로 끝나는지 확인하기 위해, "),a("code",[t._v('text.endswith("!")')]),t._v(" 를 사용했습니다.")]),t._v(" "),a("h2",{attrs:{id:"_4-문자열을-대문자로-소문자로-바꾸기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-문자열을-대문자로-소문자로-바꾸기"}},[t._v("#")]),t._v(" 4. 문자열을 대문자로, 소문자로 바꾸기")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capitalize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("upper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lower"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("capitalize() 메소드는 문자열의 첫 글자를 대문자로, 나머지 글자를 소문자로 만드는 메소드입니다.")]),t._v(" "),a("p",[t._v("upper() 메소드는 문자열의 모든 글자를 대문자로 만드는 메소드입니다.")]),t._v(" "),a("p",[t._v("lower() 메소드는 문자열의 모든 글자를 소문자로 만드는 메소드입니다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HELLO"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isupper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("islower"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("isupper() 메소드는 이 문자열이 모두 대문자로 이루어져있을때 True를 반환하는 메소드입니다.")]),t._v(" "),a("p",[t._v("islower() 메소드는 이 문자열이 모두 소문자로 이루어져있을때 True를 반환하는 메소드입니다.")])])}),[],!1,null,null,null);s.default=e.exports}}]);